from bs4 import BeautifulSoup


def extract(html, remove_codes_blockquotes=False, num=1):
    """Extracting the text from the HTML text generated by the SO and checking whether there are codes or block-quotes

    :type html: str
    :param html: Text with the HTML tags
    :type remove_codes_blockquotes: bool
    :param remove_codes_blockquotes: Whether the codes and the block-quotes has to be removed or not
    :type num: int
    :param num: Lines with more than 'num' no. of new-lines are considered as codes or block-quotes
    :returns: Plain text
    """
    soup = BeautifulSoup(html, 'lxml')

    unimp_tags = ['style', 'script', '[document]', 'head', 'title']

    for tag in soup():
        for attribute in unimp_tags:
            del tag[attribute]

    has_codes_errors = False
    if remove_codes_blockquotes:
        # Obtaining the code segments from the body
        codes = [c.get_text() for c in soup('code')]
        errors = [e.get_text() for e in soup('blockquote')]

        has_codes = False
        for code in codes:
            if list(code).count('\n') > num:
                has_codes = True

        has_errors = False
        for error in errors:
            if list(error).count('\n') > num:
                has_errors = True

        # Check whether the HTML has codes or blockquotes
        has_codes_errors = has_codes or has_errors

    data = list(soup.recursiveChildGenerator())
    visit_to_a = False
    output = ''

    # Working with the hyperlink and images with links
    for value in data:
        if value.name == 'a':
            visit_to_a = True
            output += value.text
            if hasattr(value, 'href') and value.text != value['href']:
                output += ' [' + value['href'] + '] '

        elif value.name is None and not visit_to_a:
            output += value
        else:
            visit_to_a = False

    # Converting HTML entities into Unicode characters
    output = unicode(output)

    if remove_codes_blockquotes:
        return output, has_codes_errors
    else:
        return output
